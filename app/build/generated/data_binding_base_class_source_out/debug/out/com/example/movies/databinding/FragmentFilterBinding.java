// Generated by view binder compiler. Do not edit!
package com.example.movies.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.movies.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentFilterBinding implements ViewBinding {
  @NonNull
  private final FrameLayout rootView;

  @NonNull
  public final TextView Title;

  @NonNull
  public final LinearLayout ascendingLinear;

  @NonNull
  public final LinearLayout ascendingLinear1;

  @NonNull
  public final LinearLayout ascendingLinear2;

  @NonNull
  public final LinearLayout ascendingLinear3;

  @NonNull
  public final LinearLayout ascendingLinear4;

  @NonNull
  public final ImageView imageBackSearchFilter;

  @NonNull
  public final LinearLayout screen1;

  @NonNull
  public final ConstraintLayout screen2;

  @NonNull
  public final ConstraintLayout screen3;

  @NonNull
  public final ConstraintLayout screenFilter;

  @NonNull
  public final TextView sortBy;

  @NonNull
  public final TextView sortType;

  @NonNull
  public final ImageView tickAscending;

  @NonNull
  public final ImageView tickDescending;

  @NonNull
  public final ImageView tickEvaluate;

  @NonNull
  public final ImageView tickName;

  @NonNull
  public final ImageView tickYear;

  @NonNull
  public final TextView valueAscending;

  @NonNull
  public final TextView valueDescending;

  @NonNull
  public final TextView valueEvaluate;

  @NonNull
  public final TextView valueVoteCount;

  @NonNull
  public final TextView valueYear;

  private FragmentFilterBinding(@NonNull FrameLayout rootView, @NonNull TextView Title,
      @NonNull LinearLayout ascendingLinear, @NonNull LinearLayout ascendingLinear1,
      @NonNull LinearLayout ascendingLinear2, @NonNull LinearLayout ascendingLinear3,
      @NonNull LinearLayout ascendingLinear4, @NonNull ImageView imageBackSearchFilter,
      @NonNull LinearLayout screen1, @NonNull ConstraintLayout screen2,
      @NonNull ConstraintLayout screen3, @NonNull ConstraintLayout screenFilter,
      @NonNull TextView sortBy, @NonNull TextView sortType, @NonNull ImageView tickAscending,
      @NonNull ImageView tickDescending, @NonNull ImageView tickEvaluate,
      @NonNull ImageView tickName, @NonNull ImageView tickYear, @NonNull TextView valueAscending,
      @NonNull TextView valueDescending, @NonNull TextView valueEvaluate,
      @NonNull TextView valueVoteCount, @NonNull TextView valueYear) {
    this.rootView = rootView;
    this.Title = Title;
    this.ascendingLinear = ascendingLinear;
    this.ascendingLinear1 = ascendingLinear1;
    this.ascendingLinear2 = ascendingLinear2;
    this.ascendingLinear3 = ascendingLinear3;
    this.ascendingLinear4 = ascendingLinear4;
    this.imageBackSearchFilter = imageBackSearchFilter;
    this.screen1 = screen1;
    this.screen2 = screen2;
    this.screen3 = screen3;
    this.screenFilter = screenFilter;
    this.sortBy = sortBy;
    this.sortType = sortType;
    this.tickAscending = tickAscending;
    this.tickDescending = tickDescending;
    this.tickEvaluate = tickEvaluate;
    this.tickName = tickName;
    this.tickYear = tickYear;
    this.valueAscending = valueAscending;
    this.valueDescending = valueDescending;
    this.valueEvaluate = valueEvaluate;
    this.valueVoteCount = valueVoteCount;
    this.valueYear = valueYear;
  }

  @Override
  @NonNull
  public FrameLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentFilterBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentFilterBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_filter, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentFilterBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.Title;
      TextView Title = ViewBindings.findChildViewById(rootView, id);
      if (Title == null) {
        break missingId;
      }

      id = R.id.ascendingLinear;
      LinearLayout ascendingLinear = ViewBindings.findChildViewById(rootView, id);
      if (ascendingLinear == null) {
        break missingId;
      }

      id = R.id.ascendingLinear1;
      LinearLayout ascendingLinear1 = ViewBindings.findChildViewById(rootView, id);
      if (ascendingLinear1 == null) {
        break missingId;
      }

      id = R.id.ascendingLinear2;
      LinearLayout ascendingLinear2 = ViewBindings.findChildViewById(rootView, id);
      if (ascendingLinear2 == null) {
        break missingId;
      }

      id = R.id.ascendingLinear3;
      LinearLayout ascendingLinear3 = ViewBindings.findChildViewById(rootView, id);
      if (ascendingLinear3 == null) {
        break missingId;
      }

      id = R.id.ascendingLinear4;
      LinearLayout ascendingLinear4 = ViewBindings.findChildViewById(rootView, id);
      if (ascendingLinear4 == null) {
        break missingId;
      }

      id = R.id.imageBackSearchFilter;
      ImageView imageBackSearchFilter = ViewBindings.findChildViewById(rootView, id);
      if (imageBackSearchFilter == null) {
        break missingId;
      }

      id = R.id.screen1;
      LinearLayout screen1 = ViewBindings.findChildViewById(rootView, id);
      if (screen1 == null) {
        break missingId;
      }

      id = R.id.screen2;
      ConstraintLayout screen2 = ViewBindings.findChildViewById(rootView, id);
      if (screen2 == null) {
        break missingId;
      }

      id = R.id.screen3;
      ConstraintLayout screen3 = ViewBindings.findChildViewById(rootView, id);
      if (screen3 == null) {
        break missingId;
      }

      id = R.id.screenFilter;
      ConstraintLayout screenFilter = ViewBindings.findChildViewById(rootView, id);
      if (screenFilter == null) {
        break missingId;
      }

      id = R.id.sortBy;
      TextView sortBy = ViewBindings.findChildViewById(rootView, id);
      if (sortBy == null) {
        break missingId;
      }

      id = R.id.sortType;
      TextView sortType = ViewBindings.findChildViewById(rootView, id);
      if (sortType == null) {
        break missingId;
      }

      id = R.id.tickAscending;
      ImageView tickAscending = ViewBindings.findChildViewById(rootView, id);
      if (tickAscending == null) {
        break missingId;
      }

      id = R.id.tickDescending;
      ImageView tickDescending = ViewBindings.findChildViewById(rootView, id);
      if (tickDescending == null) {
        break missingId;
      }

      id = R.id.tickEvaluate;
      ImageView tickEvaluate = ViewBindings.findChildViewById(rootView, id);
      if (tickEvaluate == null) {
        break missingId;
      }

      id = R.id.tickName;
      ImageView tickName = ViewBindings.findChildViewById(rootView, id);
      if (tickName == null) {
        break missingId;
      }

      id = R.id.tickYear;
      ImageView tickYear = ViewBindings.findChildViewById(rootView, id);
      if (tickYear == null) {
        break missingId;
      }

      id = R.id.valueAscending;
      TextView valueAscending = ViewBindings.findChildViewById(rootView, id);
      if (valueAscending == null) {
        break missingId;
      }

      id = R.id.valueDescending;
      TextView valueDescending = ViewBindings.findChildViewById(rootView, id);
      if (valueDescending == null) {
        break missingId;
      }

      id = R.id.valueEvaluate;
      TextView valueEvaluate = ViewBindings.findChildViewById(rootView, id);
      if (valueEvaluate == null) {
        break missingId;
      }

      id = R.id.valueVoteCount;
      TextView valueVoteCount = ViewBindings.findChildViewById(rootView, id);
      if (valueVoteCount == null) {
        break missingId;
      }

      id = R.id.valueYear;
      TextView valueYear = ViewBindings.findChildViewById(rootView, id);
      if (valueYear == null) {
        break missingId;
      }

      return new FragmentFilterBinding((FrameLayout) rootView, Title, ascendingLinear,
          ascendingLinear1, ascendingLinear2, ascendingLinear3, ascendingLinear4,
          imageBackSearchFilter, screen1, screen2, screen3, screenFilter, sortBy, sortType,
          tickAscending, tickDescending, tickEvaluate, tickName, tickYear, valueAscending,
          valueDescending, valueEvaluate, valueVoteCount, valueYear);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
